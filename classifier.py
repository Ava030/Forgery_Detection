# -*- coding: utf-8 -*-
"""classifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FzZsze2CqupBxOUlP7ApLUfy_avnOrFZ
"""

import os
import cv2
import numpy as np
from sklearn.svm import SVC
from keras.applications.vgg16 import VGG16, preprocess_input
import keras.utils as image
from tensorflow.keras.utils import img_to_array
from sklearn.metrics import accuracy_score, confusion_matrix
from tensorflow.keras.layers import Input
from tensorflow.keras.utils import load_img

# Load the trained SVM model
svm_classifier = load('/path/to/your/svm_model.joblib')

# Load VGG16 model
vgg_model = VGG16(weights='imagenet', include_top=False)

# Define labels and their corresponding index
label_dict = {0: 'authentic', 1: 'copy-moved', 2: 'spliced'}

# Function to extract VGG16 features from an image
def extract_vgg_features(image_path):
    # Load the image
    img = image.load_img(image_path, target_size=(224, 224))

    # Preprocess the image
    x = image.img_to_array(img)
    x = np.expand_dims(x, axis=0)
    x = preprocess_input(x)

    # Extract VGG16 features
    features = vgg_model.predict(x)

    # Flatten the features
    features = features.flatten()

    return features

# Path to your image
image_path = "/path/to/your/image.jpg"

# Extract features and reshape to the expected format
features = extract_vgg_features(image_path)
features = features.reshape(1, -1)

# Make a prediction
prediction = svm_classifier.predict(features)

# Print the result
print("The image is classified as:", label_dict[prediction[0]])

